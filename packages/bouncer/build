#!/bin/bash
source /opt/mesosphere/environment.export
export LIB_INSTALL_DIR="$PKG_PATH/lib/python3.5/site-packages"
mkdir -p "$LIB_INSTALL_DIR"


echo "pip version: $(pip --version)"
echo "Install packages from wheel files."
pip install --no-deps --no-index --target="$LIB_INSTALL_DIR" /pkg/src/jsonschema/*.whl


# Resolve 'Package libffi was not found in the pkg-config search path'.
export PKG_CONFIG_PATH=/opt/mesosphere/lib/pkgconfig


find /opt/mesosphere/bin

#echo "ldd /opt/mesosphere/bin/xmlsec1-config"
#ldd /opt/mesosphere/bin/xmlsec1-config

#echo "xmlsec1-config"
#/opt/mesosphere/bin/xmlsec1-config

echo "xml2-config --cflags --libs"
/opt/mesosphere/bin/xml2-config --cflags --libs
XML2FLAGS="$(/opt/mesosphere/bin/xml2-config --cflags --libs)"


echo "xslt-config --cflags --libs"
/opt/mesosphere/bin/xslt-config --cflags --libs
XMLSEC1FLAGS="$(/opt/mesosphere/bin/xslt-config --cflags --libs)"

pip install --no-deps \
        --install-option="--prefix=$PKG_PATH" \
        --global-option=build_ext --global-option="$XML2FLAGS" \
        --root=/ /pkg/src/lxml

pip install --no-deps \
        --install-option="--prefix=$PKG_PATH" \
        --global-option=build_ext --global-option="$XMLSEC1FLAGS" \
        --root=/ /pkg/src/xmlsec

find /opt/mesosphere/lib/python3.5/site-packages/
#ldd /opt/mesosphere/lib/python3.5/site-packages/lxml*/etree.so


find "$PKG_PATH/lib/python3.5/site-packages"
find /pkg/src/xmlsec
find /pkg/src/lxml


echo "ldd etree.so"
ldd "$PKG_PATH/lib/python3.5/site-packages/lxml/etree.cpython-35m-x86_64-linux-gnu.so"


echo "ldd xmlsec/ds.so"
ldd "$PKG_PATH/lib/python3.5/site-packages/xmlsec/ds.cpython-35m-x86_64-linux-gnu.so"


# Install from local source directories (git checkout or extracted tarballs).
# Order matters. Some of these packages require Cython or build C extensions
# for speed-up if Cython is availble.
echo "Install packages from local source directories."
for package in \
    pycparser \
    falcon \
    python-mimeparse \
    oic \
    pycryptodome \
    python3-saml \
    ldap3
do
  pip install --no-deps --install-option="--prefix=$PKG_PATH" --root=/ /pkg/src/$package
done


# TODO(cmaloney): Make bouncer install as a proper python package.
# Install bouncer (only cp directory tree).
# TODO(jp): cherry-pick what is required.
cp -r "/pkg/src/bouncer" "$PKG_PATH/bouncer"


# Deploy service file.
SERVICE_FILE_NAME="dcos-bouncer.service"
SERVICE_FILE_PATH="$PKG_PATH/dcos.target.wants_master/${SERVICE_FILE_NAME}"
mkdir -p "$(dirname "$SERVICE_FILE_PATH")"
envsubst '$PKG_PATH' < "/pkg/extra/${SERVICE_FILE_NAME}" > "${SERVICE_FILE_PATH}"
