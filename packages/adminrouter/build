#!/bin/bash

set -e  # Fail the script if anything fails
set -x  # Verbose output
set -u  # Undefined variables

# Compile OpenResty
export CXXFLAGS=-I/opt/mesosphere/include
export AR_BIN_DIR=$PKG_PATH

# Apply EE overlay on top of Open Adminrouter:
cp -vR /pkg/extra/src/ $PKG_PATH/merged_repos/
cd $PKG_PATH/merged_repos/
make apply-open DCOS_OPEN_PATH=/pkg/src/dcos_open/

# Build AR:
$OPENRESTY_COMPILE_SCRIPT --with-cc-opt="-I /opt/mesosphere/include" --with-ld-opt="-L /opt/mesosphere/lib -Wl,-rpath=/opt/mesosphere/lib"

# AR start script:
ar_wrapper="$PKG_PATH/nginx/sbin/adminrouter.sh"
envsubst '$PKG_PATH' < /pkg/extra/systemd/adminrouter.sh > "$ar_wrapper"
chmod a+x $ar_wrapper

# Incorporate the adminrouter configuration:
rm -vfR $PKG_PATH/nginx/conf/*
cp -vR $PKG_PATH/merged_repos/{common,errorpages,mime.types,nginx.agent.conf,nginx.master.conf,lib} $PKG_PATH/nginx/conf/
rm -vR $PKG_PATH/merged_repos/

# TODO: We need more comprehensive approach to libraries. This is tracked in
# https://jira.mesosphere.com/browse/DCOS-14039
mkdir -p "$PKG_PATH/lib"
cp /lib/x86_64-linux-gnu/libpcre.so.3 "$PKG_PATH/lib/libpcre.so.3"

# Copy systemd unit files:
for st in ".service" "-reload.service" "-reload.timer"; do
    tmp="$PKG_PATH/dcos.target.wants_master/dcos-adminrouter${st}"
    mkdir -vp "$(dirname "$tmp")"
    envsubst '$PKG_PATH' < "/pkg/extra/systemd/dcos-adminrouter${st}" > "$tmp"
done

for at in slave slave_public; do
    for st in ".service" "-reload.service" "-reload.timer"; do
        tmp="$PKG_PATH/dcos.target.wants_${at}/dcos-adminrouter-agent${st}"
        mkdir -vp "$(dirname "$tmp")"
        envsubst '$PKG_PATH' < "/pkg/extra/systemd/dcos-adminrouter-agent${st}" > "$tmp"
    done
done
