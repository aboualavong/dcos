# Group: Secrets
# Description: Securely store and retrieve secrets
location /secrets/v1/ {
    access_by_lua_block {
        auth.access_secrets_endpoint();
    }

    include includes/proxy-headers.conf;
    proxy_pass $upstream_secrets;
    proxy_ssl_name 127.0.0.1;
}

# Group: Vault
# Description: Default secrets store
location /vault/default/ {
    proxy_set_header Authorization "";

    include includes/proxy-headers.conf;
    proxy_pass http://vault_default/;
}

# Group: Exhibitor
# Description: Manage Zookeeper
location /exhibitor/ {
    access_by_lua_block {
        auth.access_exhibitor_endpoint();
    }
    include includes/proxy-headers.conf;

    # Exhibitor's web server may be configured to require basic authentication.
    # Replace original Authorization header: if the environment variable
    # EXHIBITOR_ADMIN_HTTPBASICAUTH_CREDS was provided, use its contents to
    # construct a basic auth header. Set the header value to an empty string
    # otherwise.
    set_by_lua $exhibitor_authorization_header '
        if EXHIBITOR_ADMIN_HTTPBASICAUTH_CREDS ~= nil then
            return "Basic " .. EXHIBITOR_ADMIN_HTTPBASICAUTH_CREDS
        else
            return ""
        end
    ';
    proxy_set_header Authorization $exhibitor_authorization_header;

    proxy_pass http://exhibitor/;
    proxy_redirect http://$http_host/ $scheme://$http_host/exhibitor/;
}

# DC/OS root CA certificate (see DCOS-8752).
#---
# Group: Certificate Authority
# Description: Get CA public key Privacy Enhanced Mail file (unauthenticated)
location = /ca/dcos-ca.crt {
    # Payload is encoded in the OpenSSL PEM format. nginx automatically
    # sends a `Content-Type: application/x-x509-ca-cert` header as of
    # the configuration in `mime.types`.
    alias /run/dcos/pki/CA/ca-bundle.crt;
}

# Java KeyStore file with DC/OS Java's lib/security/cacerts (Java's
# default CA cert bundle), plus DC/OS root CA certificate (see DCOS-8752).
# The JKS file is password-protected with the default password 'changeme'.
#---
# Group: Certificate Authority
# Description: Get CA public key Java Key Store file (unauthenticated)
location = /ca/cacerts.jks {
    # Make location emit JSK MIME type for all requests.
    types { }
    default_type application/x-java-keystore;
    alias /run/dcos/pki/CA/certs/cacerts.jks;
}

# Group: Certificate Authority
# Description: Certificate and basic signing information
location = /ca/api/v2/info {
    include includes/proxy-headers.conf;
    proxy_set_header Authorization "";
    proxy_pass http://certificate_authority;
}

# Group: Certificate Authority
# Description: Retrieve certificate chain without root CA cert for provided certificate
location = /ca/api/v2/bundle {
    access_by_lua_block {
        auth.access_cabundle_endpoint();
    }
    include includes/proxy-headers.conf;
    proxy_set_header Authorization "";
    proxy_pass http://certificate_authority;
}

# Group: Certificate Authority
# Description: List of all certificates issued by CA
location = /ca/api/v2/certificates {
    access_by_lua_block {
        auth.access_cacertificates_endpoint();
    }
    include includes/proxy-headers.conf;
    proxy_set_header Authorization "";
    proxy_pass http://certificate_authority;
}

# Group: Certificate Authority
# Description: Certificate Signing Request (CSR)
location ~ /ca/api/v2/(newcert|newkey|sign)$ {
    access_by_lua_block {
        auth.access_carw_endpoint();
    }
    include includes/proxy-headers.conf;
    proxy_set_header Authorization "";
    proxy_pass http://certificate_authority;
}

# Group: Metadata
# Description: DC/OS GUI configuration (unauthenticated)
location /dcos-metadata/ui-config.json {
    # Allow non-authed access for the UI.
    alias /opt/mesosphere/etc/ui-config.json;
}

# Group: Metadata
# Description: DC/OS bootstrap configuration
location /dcos-metadata/bootstrap-config.json {
    access_by_lua_block {
        auth.access_metadata_endpoint();
    }
    alias /opt/mesosphere/etc/bootstrap-config.json;
}

# Group: Network Metrics
# Description: Networking-related metrics
location /networking/api/v1/ {
    access_by_lua_block {
        auth.access_networkingapi_endpoint();
    }
    include includes/disable-response_caching.conf;
    include includes/proxy-headers.conf;
    rewrite ^/networking/api/v1/(.*) /$1 break;
    proxy_pass $upstream_networking_api;
}

# Group: Authentication
# Description: Access Control Service (unauthenticated)
location ~ ^/acs/api/v1/auth/(login|logout|jwks|providers|oidc/callback|oidc/providers/?|saml/providers/?)$ {
    # Make the following IAM endpoints be freely accessible:
    # - /auth/login
    # - /auth/logout
    # - /auth/jwks
    # - /auth/providers
    # - /auth/oidc/providers(/)
    # - /auth/saml/providers(/)
    # - /auth/oidc/callback
    include includes/proxy-headers.conf;
    proxy_pass http://iam;
}

# Group: Authentication
# Description: Access Control Service SAML provider callback (unauthenticated)
location ~ ^/acs/api/v1/auth/saml/providers/[0-9a-zA-Z-]+/acs-callback$ {
    include includes/proxy-headers.conf;
    # Make the SAML ACS callback URL be freely accessible.
    proxy_pass http://iam;
}

# Group: Authentication
# Description: Access Control List schema
location = /acs/acl-schema.json {
    access_by_lua_block {
        auth.access_aclschema_endpoint();
    }
    alias /opt/mesosphere/active/acl-schema/etc/acl-schema.json;
}

# Group: Authentication
# Description: Access Control List schema
location ~ ^/acs/api/v1/users/(?<uid_path>.*)/permissions$ {
    access_by_lua '
        -- Note(JP): Authorize this resource on behalf of the IAM
        -- which does not yet implement an authorizer on its own.
        local object = "dcos:iam:users:" .. ngx.var.uid_path .. ":permissions"
        local action = "read"

        -- Deny access if request is not authenticated.
        local uid = auth.validate_jwt_or_exit(object, action)

        -- Allow request if user requests his/her own permissions
        -- or if requesting user has full access to the IAM.
        if uid ~= ngx.var.uid_path then
            local triple = {
                uid = uid,
                rid = "dcos:adminrouter:acs",
                action = "full"
                }
            auth.check_access_control_entry_or_exit(triple)
        else
            local auditlogparms = {
                uid = uid,
                object = object,
                action = action,
                result = "allow",
                reason = "user requests his/her own permissions"
                }
            auth.auditlog(auditlogparms)
        end
    ';
    include includes/disable-response_caching.conf;
    include includes/proxy-headers.conf;
    proxy_pass http://iam;
}

# Group: Authentication
# Description: Access Control Service policy query (unauthenticated, internal-only)
location /internal/acs/api/v1/internal/policyquery {
    # This endpoint answers if action <a> is allowed to be performed by
    # user <u> on resource <r>. <r>, <u>, <a> are transmitted via query
    # parameters. This location does not require authentication. It is
    # meant to serve only trusted (remote) ends. For now, keep it
    # only accessible by nginx' subrequests, via the 'internal' directive.
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#internal
    internal;

    # Do not send original request headers upstream, see
    # https://github.com/openresty/lua-nginx-module#ngxlocationcapture
    proxy_pass_request_headers off;

    include includes/proxy-headers.conf;

    rewrite ^/internal/(.*) /$1 break;
    proxy_pass http://iam;
}

# Group: System
# Description: Backup & Restore DC/OS Components
location /system/v1/backup/ {
    access_by_lua_block {
        auth.access_system_backup_endpoint();
    }

    include includes/proxy-headers.conf;
    proxy_pass http://backup/;
}

# Group: CockroachDB
# Description: Redirect to the CockroachDB Admin UI
location = /cockroachdb {
    rewrite ^/cockroachdb$ $scheme://$http_host/cockroachdb/ permanent;
}

# Group: CockroachDB
# Description: The CockroachDB Admin UI
location /cockroachdb/ {
    access_by_lua_block {
        auth.access_cockroachdb_endpoint();
    }

    proxy_pass https://cockroachdb/;

    proxy_set_header Host $http_host;
    proxy_ssl_name 127.0.0.1;
    proxy_ssl_certificate /run/dcos/pki/cockroach/client.root.crt;
    proxy_ssl_certificate_key /run/dcos/pki/cockroach/client.root.key;
}
