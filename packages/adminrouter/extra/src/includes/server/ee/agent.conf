# Group: Authentication
# Description: Access Control Service policy query (internal-only)
location /internal/acs/api/v1/internal/policyquery {
    # This endpoint answers if action <a> is allowed to be performed by
    # user <u> on resource <r>. <r>, <u>, <a> are transmitted via query
    # parameters. This location does not require authentication. It is
    # meant to serve only trusted (remote) ends. For now, keep it
    # only accessible by nginx' subrequests, via the 'internal' directive.
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#internal
    internal;

    set $authorization_header '';
    rewrite_by_lua_block {
        ngx.var.authorization_header = "token=" .. SERVICE_AUTH_TOKEN
    }

    # Do not send original request headers upstream, see
    # https://github.com/openresty/lua-nginx-module#ngxlocationcapture
    proxy_pass_request_headers off;
    proxy_set_header Authorization $authorization_header;

    include includes/proxy-headers.conf;

    proxy_pass $upstream_iam;
    rewrite ^/internal/(.*) /$1 break;
}

# In strict mode `dcos-log` will perform fine grained ACLs check for
# incoming request on its own.
# In order to allow the request user must provide 3 parameters:
# * framework_id
# * executor_id,
# * container_id
# * Authorization header.
# dcos-log will extract the token and perform a new request against
# sandbox to browse files on user's behalf. Access is granted based on
# response.
#---
# Group: System
# Description: Container (task) logs
location ~ ^/system/v1/logs/v1/(?<type>range|stream)/framework/(?<framework>.*?)/executor/(?<executor>.*?)/container/(?<container>.*?)$ {
    access_by_lua_block {
        auth.access_system_logs_strictagent_endpoint();
    }

    include includes/proxy-headers.conf;
    include includes/http-11.conf;
    proxy_pass_header X-Accel-Buffering;
    proxy_pass http://log/$type/framework/$framework/executor/$executor/container/$container$is_args$query_string;
}
